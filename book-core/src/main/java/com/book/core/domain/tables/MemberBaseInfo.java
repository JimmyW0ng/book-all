/*
 * This file is generated by jOOQ.
*/
package com.book.core.domain.tables;


import com.book.core.domain.Book;
import com.book.core.domain.Indexes;
import com.book.core.domain.Keys;
import com.book.core.domain.enums.MemberBaseInfoSex;
import com.book.core.domain.enums.MemberBaseInfoStatus;
import com.book.core.domain.tables.records.MemberBaseInfoRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.DateAsTimestampBinding;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * 会员基础信息表
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MemberBaseInfo extends TableImpl<MemberBaseInfoRecord> {

    private static final long serialVersionUID = -831787162;

    /**
     * The reference instance of <code>book.member_base_info</code>
     */
    public static final MemberBaseInfo MEMBER_BASE_INFO = new MemberBaseInfo();
    /**
     * The column <code>book.member_base_info.vip_end</code>. vip到期时间
     */
    public final TableField<MemberBaseInfoRecord, Timestamp> VIP_END = createField("vip_end", org.jooq.impl.SQLDataType.TIMESTAMP, this, "vip到期时间");

    /**
     * The column <code>book.member_base_info.id</code>. 主键
     */
    public final TableField<MemberBaseInfoRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>book.member_base_info.mobile</code>. 手机号
     */
    public final TableField<MemberBaseInfoRecord, Long> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "手机号");

    /**
     * The column <code>book.member_base_info.status</code>. 状态：正常；已冻结；已注销；
     */
    public final TableField<MemberBaseInfoRecord, MemberBaseInfoStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false).defaultValue(org.jooq.impl.DSL.inline("normal", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.book.core.domain.enums.MemberBaseInfoStatus.class), this, "状态：正常；已冻结；已注销；");
    /**
     * The column <code>book.member_base_info.register_ip</code>. 注册ip
     */
    public final TableField<MemberBaseInfoRecord, String> REGISTER_IP = createField("register_ip", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注册ip");

    /**
     * The column <code>book.member_base_info.nick_name</code>. 昵称
     */
    public final TableField<MemberBaseInfoRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "昵称");

    /**
     * The column <code>book.member_base_info.sex</code>. 性别：男；女；未知；
     */
    public final TableField<MemberBaseInfoRecord, MemberBaseInfoSex> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(com.book.core.domain.enums.MemberBaseInfoSex.class), this, "性别：男；女；未知；");

    /**
     * The column <code>book.member_base_info.birthday</code>. 生日
     */
    public final TableField<MemberBaseInfoRecord, Timestamp> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.TIMESTAMP, this, "生日", new DateAsTimestampBinding());

    /**
     * The column <code>book.member_base_info.true_name</code>. 真实姓名
     */
    public final TableField<MemberBaseInfoRecord, String> TRUE_NAME = createField("true_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "真实姓名");

    /**
     * The column <code>book.member_base_info.identity_number</code>. 身份证号码
     */
    public final TableField<MemberBaseInfoRecord, String> IDENTITY_NUMBER = createField("identity_number", org.jooq.impl.SQLDataType.VARCHAR(20), this, "身份证号码");

    /**
     * The column <code>book.member_base_info.short_url</code>. 推荐码
     */
    public final TableField<MemberBaseInfoRecord, String> SHORT_URL = createField("short_url", org.jooq.impl.SQLDataType.VARCHAR(32), this, "推荐码");

    /**
     * The column <code>book.member_base_info.avatar</code>. 个人头像url
     */
    public final TableField<MemberBaseInfoRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(255), this, "个人头像url");

    /**
     * The column <code>book.member_base_info.register_client</code>. 注册客户端
     */
    public final TableField<MemberBaseInfoRecord, Long> REGISTER_CLIENT = createField("register_client", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "注册客户端");

    /**
     * The column <code>book.member_base_info.register_trace_source</code>. 注册来源码
     */
    public final TableField<MemberBaseInfoRecord, String> REGISTER_TRACE_SOURCE = createField("register_trace_source", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注册来源码");

    /**
     * The column <code>book.member_base_info.register_trace_no</code>. 注册来源码编号
     */
    public final TableField<MemberBaseInfoRecord, String> REGISTER_TRACE_NO = createField("register_trace_no", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注册来源码编号");

    /**
     * The column <code>book.member_base_info.register_time</code>. 注册时间
     */
    public final TableField<MemberBaseInfoRecord, Timestamp> REGISTER_TIME = createField("register_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "注册时间");
    /**
     * The column <code>book.member_base_info.version</code>. 版本号
     */
    public final TableField<MemberBaseInfoRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "版本号");

    /**
     * The column <code>book.member_base_info.remark</code>. 备注
     */
    public final TableField<MemberBaseInfoRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>book.member_base_info.create_at</code>. 创建时间
     */
    public final TableField<MemberBaseInfoRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>book.member_base_info.update_at</code>. 更新时间
     */
    public final TableField<MemberBaseInfoRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>book.member_base_info.del_flag</code>. 删除标志
     */
    public final TableField<MemberBaseInfoRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    private MemberBaseInfo(Name alias, Table<MemberBaseInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "会员基础信息表");
    }

    /**
     * Create a <code>book.member_base_info</code> table reference
     */
    public MemberBaseInfo() {
        this(DSL.name("member_base_info"), null);
    }

    /**
     * Create an aliased <code>book.member_base_info</code> table reference
     */
    public MemberBaseInfo(String alias) {
        this(DSL.name(alias), MEMBER_BASE_INFO);
    }

    /**
     * Create an aliased <code>book.member_base_info</code> table reference
     */
    public MemberBaseInfo(Name alias) {
        this(alias, MEMBER_BASE_INFO);
    }

    private MemberBaseInfo(Name alias, Table<MemberBaseInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberBaseInfoRecord> getRecordType() {
        return MemberBaseInfoRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Book.BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBER_BASE_INFO_INDEX_IDENTITY_NUMBER, Indexes.MEMBER_BASE_INFO_INDEX_SHORT_URL, Indexes.MEMBER_BASE_INFO_PRIMARY, Indexes.MEMBER_BASE_INFO_UNIQUE_MEMBER_MOBILE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MemberBaseInfoRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER_BASE_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MemberBaseInfoRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_BASE_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MemberBaseInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberBaseInfoRecord>>asList(Keys.KEY_MEMBER_BASE_INFO_PRIMARY, Keys.KEY_MEMBER_BASE_INFO_UNIQUE_MEMBER_MOBILE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<MemberBaseInfoRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberBaseInfo as(String alias) {
        return new MemberBaseInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberBaseInfo as(Name alias) {
        return new MemberBaseInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBaseInfo rename(String name) {
        return new MemberBaseInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBaseInfo rename(Name name) {
        return new MemberBaseInfo(name, null);
    }
}
