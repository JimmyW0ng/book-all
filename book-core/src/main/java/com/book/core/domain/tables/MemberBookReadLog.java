/*
 * This file is generated by jOOQ.
 */
package com.book.core.domain.tables;


import com.book.core.domain.Book;
import com.book.core.domain.Indexes;
import com.book.core.domain.Keys;
import com.book.core.domain.tables.records.MemberBookReadLogRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * 会员书籍阅读日志表
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MemberBookReadLog extends TableImpl<MemberBookReadLogRecord> {

    /**
     * The reference instance of <code>book.member_book_read_log</code>
     */
    public static final MemberBookReadLog MEMBER_BOOK_READ_LOG = new MemberBookReadLog();
    private static final long serialVersionUID = 1332882874;
    /**
     * The column <code>book.member_book_read_log.id</code>. 主键
     */
    public final TableField<MemberBookReadLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");
    /**
     * The column <code>book.member_book_read_log.member_id</code>. 会员id
     */
    public final TableField<MemberBookReadLogRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "会员id");
    /**
     * The column <code>book.member_book_read_log.book_id</code>. 书籍id
     */
    public final TableField<MemberBookReadLogRecord, Long> BOOK_ID = createField("book_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "书籍id");
    /**
     * The column <code>book.member_book_read_log.book_catalog_id</code>. 目录id
     */
    public final TableField<MemberBookReadLogRecord, Long> BOOK_CATALOG_ID = createField("book_catalog_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "目录id");
    /**
     * The column <code>book.member_book_read_log.remark</code>. 备注
     */
    public final TableField<MemberBookReadLogRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "备注");
    /**
     * The column <code>book.member_book_read_log.create_at</code>. 创建时间
     */
    public final TableField<MemberBookReadLogRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");
    /**
     * The column <code>book.member_book_read_log.update_at</code>. 更新时间
     */
    public final TableField<MemberBookReadLogRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");
    /**
     * The column <code>book.member_book_read_log.del_flag</code>. 删除标记
     */
    public final TableField<MemberBookReadLogRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标记");
    /**
     * The column <code>book.member_book_read_log.version</code>. 版本号
     */
    public final TableField<MemberBookReadLogRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "版本号");

    /**
     * Create a <code>book.member_book_read_log</code> table reference
     */
    public MemberBookReadLog() {
        this(DSL.name("member_book_read_log"), null);
    }

    /**
     * Create an aliased <code>book.member_book_read_log</code> table reference
     */
    public MemberBookReadLog(String alias) {
        this(DSL.name(alias), MEMBER_BOOK_READ_LOG);
    }

    /**
     * Create an aliased <code>book.member_book_read_log</code> table reference
     */
    public MemberBookReadLog(Name alias) {
        this(alias, MEMBER_BOOK_READ_LOG);
    }

    private MemberBookReadLog(Name alias, Table<MemberBookReadLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberBookReadLog(Name alias, Table<MemberBookReadLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "会员书籍阅读日志表");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberBookReadLogRecord> getRecordType() {
        return MemberBookReadLogRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Book.BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBER_BOOK_READ_LOG_INDEX_MEMBER_ID, Indexes.MEMBER_BOOK_READ_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MemberBookReadLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER_BOOK_READ_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MemberBookReadLogRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_BOOK_READ_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MemberBookReadLogRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberBookReadLogRecord>>asList(Keys.KEY_MEMBER_BOOK_READ_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<MemberBookReadLogRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberBookReadLog as(String alias) {
        return new MemberBookReadLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberBookReadLog as(Name alias) {
        return new MemberBookReadLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBookReadLog rename(String name) {
        return new MemberBookReadLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBookReadLog rename(Name name) {
        return new MemberBookReadLog(name, null);
    }
}
